{"ast":null,"code":"/**\r\n * File Upload Service for Grievance System\r\n * Handles file uploads, downloads, and management\r\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass FileUploadService {\n  /**\r\n   * Upload files for a grievance\r\n   * @param {FileList} files - Files to upload\r\n   * @param {string} grievanceId - Grievance reference ID\r\n   * @param {string} description - Optional description for the files\r\n   * @param {function} onProgress - Progress callback function\r\n   */\n  async uploadFiles(files, grievanceId, description = '', onProgress = null) {\n    try {\n      const formData = new FormData();\n\n      // Add files to form data\n      Array.from(files).forEach((file, index) => {\n        formData.append('files', file);\n      });\n      formData.append('grievanceId', grievanceId);\n      formData.append('description', description);\n      const xhr = new XMLHttpRequest();\n      return new Promise((resolve, reject) => {\n        // Track upload progress\n        if (onProgress) {\n          xhr.upload.addEventListener('progress', event => {\n            if (event.lengthComputable) {\n              const percentComplete = event.loaded / event.total * 100;\n              onProgress(percentComplete);\n            }\n          });\n        }\n        xhr.addEventListener('load', () => {\n          if (xhr.status === 200) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              resolve(response);\n            } catch (error) {\n              reject(new Error('Invalid response format'));\n            }\n          } else {\n            try {\n              const error = JSON.parse(xhr.responseText);\n              reject(new Error(error.error || 'Upload failed'));\n            } catch {\n              reject(new Error(`Upload failed with status ${xhr.status}`));\n            }\n          }\n        });\n        xhr.addEventListener('error', () => {\n          reject(new Error('Network error during upload'));\n        });\n        xhr.addEventListener('timeout', () => {\n          reject(new Error('Upload timeout'));\n        });\n        xhr.open('POST', `${API_BASE_URL}/files/upload`);\n        xhr.timeout = 300000; // 5 minutes timeout\n        xhr.send(formData);\n      });\n    } catch (error) {\n      throw new Error(`Upload preparation failed: ${error.message}`);\n    }\n  }\n\n  /**\r\n   * Get files for a grievance\r\n   * @param {string} grievanceId - Grievance reference ID\r\n   */\n  async getFiles(grievanceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/files/${grievanceId}`);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to fetch files');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Failed to get files: ${error.message}`);\n    }\n  }\n\n  /**\r\n   * Download a file\r\n   * @param {string} fileId - File ID\r\n   * @param {string} filename - Original filename\r\n   */\n  async downloadFile(fileId, filename) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/download/${fileId}`);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Download failed');\n      }\n      const blob = await response.blob();\n\n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      throw new Error(`Download failed: ${error.message}`);\n    }\n  }\n\n  /**\r\n   * Delete a file\r\n   * @param {string} fileId - File ID\r\n   */\n  async deleteFile(fileId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Delete failed');\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Delete failed: ${error.message}`);\n    }\n  }\n\n  /**\r\n   * Get file preview URL (for images)\r\n   * @param {string} fileId - File ID\r\n   */\n  getPreviewUrl(fileId) {\n    return `${API_BASE_URL}/preview/${fileId}`;\n  }\n\n  /**\r\n   * Validate file before upload\r\n   * @param {File} file - File to validate\r\n   */\n  validateFile(file) {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    const maxSize = 10 * 1024 * 1024; // 10MB\n\n    if (!allowedTypes.includes(file.type)) {\n      return {\n        valid: false,\n        error: 'Invalid file type. Only JPEG, PNG, GIF, PDF, TXT, DOC, and DOCX files are allowed.'\n      };\n    }\n    if (file.size > maxSize) {\n      return {\n        valid: false,\n        error: 'File too large. Maximum size is 10MB.'\n      };\n    }\n    return {\n      valid: true\n    };\n  }\n\n  /**\r\n   * Format file size for display\r\n   * @param {number} bytes - File size in bytes\r\n   */\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\r\n   * Get file type icon\r\n   * @param {string} mimetype - File MIME type\r\n   */\n  getFileIcon(mimetype) {\n    if (mimetype.startsWith('image/')) return '🖼️';\n    if (mimetype === 'application/pdf') return '📄';\n    if (mimetype.includes('word')) return '📝';\n    if (mimetype === 'text/plain') return '📃';\n    return '📎';\n  }\n\n  /**\r\n   * Check if file is an image\r\n   * @param {string} mimetype - File MIME type\r\n   */\n  isImage(mimetype) {\n    return mimetype.startsWith('image/');\n  }\n}\nconst fileUploadService = new FileUploadService();\nexport default fileUploadService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","FileUploadService","uploadFiles","files","grievanceId","description","onProgress","formData","FormData","Array","from","forEach","file","index","append","xhr","XMLHttpRequest","Promise","resolve","reject","upload","addEventListener","event","lengthComputable","percentComplete","loaded","total","status","response","JSON","parse","responseText","error","Error","open","timeout","send","message","getFiles","fetch","ok","json","downloadFile","fileId","filename","blob","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","deleteFile","method","getPreviewUrl","validateFile","allowedTypes","maxSize","includes","type","valid","size","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","getFileIcon","mimetype","startsWith","isImage","fileUploadService"],"sources":["C:/Users/jaide/-Online-Feedback-and-Grievance-Redressal-System-/grievance-system/src/services/fileUploadService.js"],"sourcesContent":["/**\r\n * File Upload Service for Grievance System\r\n * Handles file uploads, downloads, and management\r\n */\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass FileUploadService {\r\n  /**\r\n   * Upload files for a grievance\r\n   * @param {FileList} files - Files to upload\r\n   * @param {string} grievanceId - Grievance reference ID\r\n   * @param {string} description - Optional description for the files\r\n   * @param {function} onProgress - Progress callback function\r\n   */\r\n  async uploadFiles(files, grievanceId, description = '', onProgress = null) {\r\n    try {\r\n      const formData = new FormData();\r\n      \r\n      // Add files to form data\r\n      Array.from(files).forEach((file, index) => {\r\n        formData.append('files', file);\r\n      });\r\n      \r\n      formData.append('grievanceId', grievanceId);\r\n      formData.append('description', description);\r\n\r\n      const xhr = new XMLHttpRequest();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        // Track upload progress\r\n        if (onProgress) {\r\n          xhr.upload.addEventListener('progress', (event) => {\r\n            if (event.lengthComputable) {\r\n              const percentComplete = (event.loaded / event.total) * 100;\r\n              onProgress(percentComplete);\r\n            }\r\n          });\r\n        }\r\n\r\n        xhr.addEventListener('load', () => {\r\n          if (xhr.status === 200) {\r\n            try {\r\n              const response = JSON.parse(xhr.responseText);\r\n              resolve(response);\r\n            } catch (error) {\r\n              reject(new Error('Invalid response format'));\r\n            }\r\n          } else {\r\n            try {\r\n              const error = JSON.parse(xhr.responseText);\r\n              reject(new Error(error.error || 'Upload failed'));\r\n            } catch {\r\n              reject(new Error(`Upload failed with status ${xhr.status}`));\r\n            }\r\n          }\r\n        });\r\n\r\n        xhr.addEventListener('error', () => {\r\n          reject(new Error('Network error during upload'));\r\n        });\r\n\r\n        xhr.addEventListener('timeout', () => {\r\n          reject(new Error('Upload timeout'));\r\n        });\r\n\r\n        xhr.open('POST', `${API_BASE_URL}/files/upload`);\r\n        xhr.timeout = 300000; // 5 minutes timeout\r\n        xhr.send(formData);\r\n      });\r\n\r\n    } catch (error) {\r\n      throw new Error(`Upload preparation failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get files for a grievance\r\n   * @param {string} grievanceId - Grievance reference ID\r\n   */\r\n  async getFiles(grievanceId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/files/${grievanceId}`);\r\n      \r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Failed to fetch files');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      throw new Error(`Failed to get files: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download a file\r\n   * @param {string} fileId - File ID\r\n   * @param {string} filename - Original filename\r\n   */\r\n  async downloadFile(fileId, filename) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/download/${fileId}`);\r\n      \r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Download failed');\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      \r\n      // Create download link\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = filename;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      throw new Error(`Download failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a file\r\n   * @param {string} fileId - File ID\r\n   */\r\n  async deleteFile(fileId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/files/${fileId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.error || 'Delete failed');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      throw new Error(`Delete failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file preview URL (for images)\r\n   * @param {string} fileId - File ID\r\n   */\r\n  getPreviewUrl(fileId) {\r\n    return `${API_BASE_URL}/preview/${fileId}`;\r\n  }\r\n\r\n  /**\r\n   * Validate file before upload\r\n   * @param {File} file - File to validate\r\n   */\r\n  validateFile(file) {\r\n    const allowedTypes = [\r\n      'image/jpeg',\r\n      'image/png', \r\n      'image/gif',\r\n      'application/pdf',\r\n      'text/plain',\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n\r\n    const maxSize = 10 * 1024 * 1024; // 10MB\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n      return {\r\n        valid: false,\r\n        error: 'Invalid file type. Only JPEG, PNG, GIF, PDF, TXT, DOC, and DOCX files are allowed.'\r\n      };\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      return {\r\n        valid: false,\r\n        error: 'File too large. Maximum size is 10MB.'\r\n      };\r\n    }\r\n\r\n    return { valid: true };\r\n  }\r\n\r\n  /**\r\n   * Format file size for display\r\n   * @param {number} bytes - File size in bytes\r\n   */\r\n  formatFileSize(bytes) {\r\n    if (bytes === 0) return '0 Bytes';\r\n    \r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  /**\r\n   * Get file type icon\r\n   * @param {string} mimetype - File MIME type\r\n   */\r\n  getFileIcon(mimetype) {\r\n    if (mimetype.startsWith('image/')) return '🖼️';\r\n    if (mimetype === 'application/pdf') return '📄';\r\n    if (mimetype.includes('word')) return '📝';\r\n    if (mimetype === 'text/plain') return '📃';\r\n    return '📎';\r\n  }\r\n\r\n  /**\r\n   * Check if file is an image\r\n   * @param {string} mimetype - File MIME type\r\n   */\r\n  isImage(mimetype) {\r\n    return mimetype.startsWith('image/');\r\n  }\r\n}\r\n\r\nconst fileUploadService = new FileUploadService();\r\nexport default fileUploadService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}