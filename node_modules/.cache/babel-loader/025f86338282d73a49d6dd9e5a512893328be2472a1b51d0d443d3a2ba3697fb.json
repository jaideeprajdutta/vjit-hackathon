{"ast":null,"code":"/**\r\n * Utility functions for generating unique reference IDs for grievances\r\n */\n\n/**\r\n * Generates a unique reference ID for a grievance\r\n * Format: GRV-YYYY-MMDD-XXXX\r\n * Where XXXX is a random 4-digit number\r\n */\nexport const generateReferenceId = () => {\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n\n  // Generate a random 4-digit number\n  const randomNum = Math.floor(1000 + Math.random() * 9000);\n  return `GRV-${year}-${month}${day}-${randomNum}`;\n};\n\n/**\r\n * Generates a tracking token for anonymous submissions\r\n * Format: TRK-XXXXXXXX (8 random alphanumeric characters)\r\n */\nexport const generateTrackingToken = () => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let token = 'TRK-';\n  for (let i = 0; i < 8; i++) {\n    token += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return token;\n};\n\n/**\r\n * Validates a reference ID format\r\n */\nexport const validateReferenceId = referenceId => {\n  if (!referenceId || typeof referenceId !== 'string') {\n    return false;\n  }\n\n  // Check for GRV format: GRV-YYYY-MMDD-XXXX\n  const grvPattern = /^GRV-\\d{4}-\\d{4}-\\d{4}$/;\n\n  // Check for TRK format: TRK-XXXXXXXX\n  const trkPattern = /^TRK-[A-Z0-9]{8}$/;\n  return grvPattern.test(referenceId) || trkPattern.test(referenceId);\n};\n\n/**\r\n * Extracts date information from a reference ID\r\n */\nexport const extractDateFromReferenceId = referenceId => {\n  if (!validateReferenceId(referenceId) || !referenceId.startsWith('GRV-')) {\n    return null;\n  }\n  const parts = referenceId.split('-');\n  if (parts.length !== 4) return null;\n  const year = parseInt(parts[1]);\n  const monthDay = parts[2];\n  const month = parseInt(monthDay.substring(0, 2)) - 1; // Month is 0-indexed\n  const day = parseInt(monthDay.substring(2, 4));\n  return new Date(year, month, day);\n};\n\n/**\r\n * Generates a secure hash for internal tracking (not exposed to users)\r\n */\nexport const generateInternalHash = () => {\n  const timestamp = Date.now().toString();\n  const random = Math.random().toString(36).substring(2);\n  return `${timestamp}-${random}`;\n};\n\n/**\r\n * Creates a complete grievance reference object\r\n */\nexport const createGrievanceReference = (isAnonymous = false) => {\n  const referenceId = isAnonymous ? generateTrackingToken() : generateReferenceId();\n  const internalHash = generateInternalHash();\n  const createdAt = new Date().toISOString();\n  return {\n    referenceId,\n    internalHash,\n    createdAt,\n    isAnonymous,\n    type: isAnonymous ? 'anonymous' : 'registered'\n  };\n};","map":{"version":3,"names":["generateReferenceId","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","randomNum","Math","floor","random","generateTrackingToken","chars","token","i","charAt","length","validateReferenceId","referenceId","grvPattern","trkPattern","test","extractDateFromReferenceId","startsWith","parts","split","parseInt","monthDay","substring","generateInternalHash","timestamp","toString","createGrievanceReference","isAnonymous","internalHash","createdAt","toISOString","type"],"sources":["C:/Users/jaide/-Online-Feedback-and-Grievance-Redressal-System-/grievance-system/src/utils/referenceGenerator.js"],"sourcesContent":["/**\r\n * Utility functions for generating unique reference IDs for grievances\r\n */\r\n\r\n/**\r\n * Generates a unique reference ID for a grievance\r\n * Format: GRV-YYYY-MMDD-XXXX\r\n * Where XXXX is a random 4-digit number\r\n */\r\nexport const generateReferenceId = () => {\r\n  const now = new Date();\r\n  const year = now.getFullYear();\r\n  const month = String(now.getMonth() + 1).padStart(2, '0');\r\n  const day = String(now.getDate()).padStart(2, '0');\r\n  \r\n  // Generate a random 4-digit number\r\n  const randomNum = Math.floor(1000 + Math.random() * 9000);\r\n  \r\n  return `GRV-${year}-${month}${day}-${randomNum}`;\r\n};\r\n\r\n/**\r\n * Generates a tracking token for anonymous submissions\r\n * Format: TRK-XXXXXXXX (8 random alphanumeric characters)\r\n */\r\nexport const generateTrackingToken = () => {\r\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  let token = 'TRK-';\r\n  \r\n  for (let i = 0; i < 8; i++) {\r\n    token += chars.charAt(Math.floor(Math.random() * chars.length));\r\n  }\r\n  \r\n  return token;\r\n};\r\n\r\n/**\r\n * Validates a reference ID format\r\n */\r\nexport const validateReferenceId = (referenceId) => {\r\n  if (!referenceId || typeof referenceId !== 'string') {\r\n    return false;\r\n  }\r\n  \r\n  // Check for GRV format: GRV-YYYY-MMDD-XXXX\r\n  const grvPattern = /^GRV-\\d{4}-\\d{4}-\\d{4}$/;\r\n  \r\n  // Check for TRK format: TRK-XXXXXXXX\r\n  const trkPattern = /^TRK-[A-Z0-9]{8}$/;\r\n  \r\n  return grvPattern.test(referenceId) || trkPattern.test(referenceId);\r\n};\r\n\r\n/**\r\n * Extracts date information from a reference ID\r\n */\r\nexport const extractDateFromReferenceId = (referenceId) => {\r\n  if (!validateReferenceId(referenceId) || !referenceId.startsWith('GRV-')) {\r\n    return null;\r\n  }\r\n  \r\n  const parts = referenceId.split('-');\r\n  if (parts.length !== 4) return null;\r\n  \r\n  const year = parseInt(parts[1]);\r\n  const monthDay = parts[2];\r\n  const month = parseInt(monthDay.substring(0, 2)) - 1; // Month is 0-indexed\r\n  const day = parseInt(monthDay.substring(2, 4));\r\n  \r\n  return new Date(year, month, day);\r\n};\r\n\r\n/**\r\n * Generates a secure hash for internal tracking (not exposed to users)\r\n */\r\nexport const generateInternalHash = () => {\r\n  const timestamp = Date.now().toString();\r\n  const random = Math.random().toString(36).substring(2);\r\n  return `${timestamp}-${random}`;\r\n};\r\n\r\n/**\r\n * Creates a complete grievance reference object\r\n */\r\nexport const createGrievanceReference = (isAnonymous = false) => {\r\n  const referenceId = isAnonymous ? generateTrackingToken() : generateReferenceId();\r\n  const internalHash = generateInternalHash();\r\n  const createdAt = new Date().toISOString();\r\n  \r\n  return {\r\n    referenceId,\r\n    internalHash,\r\n    createdAt,\r\n    isAnonymous,\r\n    type: isAnonymous ? 'anonymous' : 'registered'\r\n  };\r\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;EACvC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;EACtB,MAAMC,IAAI,GAAGF,GAAG,CAACG,WAAW,CAAC,CAAC;EAC9B,MAAMC,KAAK,GAAGC,MAAM,CAACL,GAAG,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACzD,MAAMC,GAAG,GAAGH,MAAM,CAACL,GAAG,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;;EAElD;EACA,MAAMG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;EAEzD,OAAO,OAAOX,IAAI,IAAIE,KAAK,GAAGI,GAAG,IAAIE,SAAS,EAAE;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAMC,KAAK,GAAG,sCAAsC;EACpD,IAAIC,KAAK,GAAG,MAAM;EAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,KAAK,CAACG,MAAM,CAACP,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGE,KAAK,CAACI,MAAM,CAAC,CAAC;EACjE;EAEA,OAAOH,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,mBAAmB,GAAIC,WAAW,IAAK;EAClD,IAAI,CAACA,WAAW,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IACnD,OAAO,KAAK;EACd;;EAEA;EACA,MAAMC,UAAU,GAAG,yBAAyB;;EAE5C;EACA,MAAMC,UAAU,GAAG,mBAAmB;EAEtC,OAAOD,UAAU,CAACE,IAAI,CAACH,WAAW,CAAC,IAAIE,UAAU,CAACC,IAAI,CAACH,WAAW,CAAC;AACrE,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMI,0BAA0B,GAAIJ,WAAW,IAAK;EACzD,IAAI,CAACD,mBAAmB,CAACC,WAAW,CAAC,IAAI,CAACA,WAAW,CAACK,UAAU,CAAC,MAAM,CAAC,EAAE;IACxE,OAAO,IAAI;EACb;EAEA,MAAMC,KAAK,GAAGN,WAAW,CAACO,KAAK,CAAC,GAAG,CAAC;EACpC,IAAID,KAAK,CAACR,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAEnC,MAAMjB,IAAI,GAAG2B,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EAC/B,MAAMG,QAAQ,GAAGH,KAAK,CAAC,CAAC,CAAC;EACzB,MAAMvB,KAAK,GAAGyB,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACtD,MAAMvB,GAAG,GAAGqB,QAAQ,CAACC,QAAQ,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAE9C,OAAO,IAAI9B,IAAI,CAACC,IAAI,EAAEE,KAAK,EAAEI,GAAG,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMwB,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMC,SAAS,GAAGhC,IAAI,CAACD,GAAG,CAAC,CAAC,CAACkC,QAAQ,CAAC,CAAC;EACvC,MAAMrB,MAAM,GAAGF,IAAI,CAACE,MAAM,CAAC,CAAC,CAACqB,QAAQ,CAAC,EAAE,CAAC,CAACH,SAAS,CAAC,CAAC,CAAC;EACtD,OAAO,GAAGE,SAAS,IAAIpB,MAAM,EAAE;AACjC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMsB,wBAAwB,GAAGA,CAACC,WAAW,GAAG,KAAK,KAAK;EAC/D,MAAMf,WAAW,GAAGe,WAAW,GAAGtB,qBAAqB,CAAC,CAAC,GAAGf,mBAAmB,CAAC,CAAC;EACjF,MAAMsC,YAAY,GAAGL,oBAAoB,CAAC,CAAC;EAC3C,MAAMM,SAAS,GAAG,IAAIrC,IAAI,CAAC,CAAC,CAACsC,WAAW,CAAC,CAAC;EAE1C,OAAO;IACLlB,WAAW;IACXgB,YAAY;IACZC,SAAS;IACTF,WAAW;IACXI,IAAI,EAAEJ,WAAW,GAAG,WAAW,GAAG;EACpC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}