{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaide\\\\-Online-Feedback-and-Grievance-Redressal-System-\\\\grievance-system\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Mock data for institutions and roles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockInstitutions = [{\n  id: 'inst_1',\n  name: 'University of Technology',\n  type: 'University'\n}, {\n  id: 'inst_2',\n  name: 'City Medical College',\n  type: 'Medical College'\n}, {\n  id: 'inst_3',\n  name: 'Regional Engineering Institute',\n  type: 'Engineering College'\n}, {\n  id: 'inst_4',\n  name: 'State Business School',\n  type: 'Business School'\n}, {\n  id: 'inst_5',\n  name: 'Government Arts College',\n  type: 'Arts College'\n}];\nconst mockRoles = [{\n  id: 'role_1',\n  name: 'Student',\n  description: 'Student of the institution'\n}, {\n  id: 'role_2',\n  name: 'Faculty',\n  description: 'Teaching staff member'\n}, {\n  id: 'role_3',\n  name: 'Admin',\n  description: 'Administrative staff'\n}, {\n  id: 'role_4',\n  name: 'Grievance Officer',\n  description: 'Handles grievance processing'\n}];\nconst mockCategories = ['Academic Issues', 'Hostel/Accommodation', 'Harassment/Discrimination', 'Fee/Financial Issues', 'Infrastructure Problems', 'Administrative Issues', 'Other'];\n\n// Initial state\nconst initialState = {\n  user: {\n    selectedInstitution: null,\n    selectedRole: null,\n    isAuthenticated: false\n  },\n  institutions: mockInstitutions,\n  roles: mockRoles,\n  categories: mockCategories,\n  grievances: [],\n  notifications: [],\n  chatbotOpen: false\n};\n\n// Action types\nconst actionTypes = {\n  SELECT_INSTITUTION: 'SELECT_INSTITUTION',\n  SELECT_ROLE: 'SELECT_ROLE',\n  LOGIN_USER: 'LOGIN_USER',\n  LOGOUT_USER: 'LOGOUT_USER',\n  SUBMIT_GRIEVANCE: 'SUBMIT_GRIEVANCE',\n  UPDATE_GRIEVANCE_STATUS: 'UPDATE_GRIEVANCE_STATUS',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  TOGGLE_CHATBOT: 'TOGGLE_CHATBOT',\n  LOAD_MOCK_GRIEVANCES: 'LOAD_MOCK_GRIEVANCES'\n};\n\n// Reducer function\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.SELECT_INSTITUTION:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          selectedInstitution: action.payload\n        }\n      };\n    case actionTypes.SELECT_ROLE:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          selectedRole: action.payload\n        }\n      };\n    case actionTypes.LOGIN_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isAuthenticated: true\n        }\n      };\n    case actionTypes.LOGOUT_USER:\n      return {\n        ...state,\n        user: {\n          selectedInstitution: null,\n          selectedRole: null,\n          isAuthenticated: false\n        }\n      };\n    case actionTypes.SUBMIT_GRIEVANCE:\n      const newGrievance = {\n        id: uuidv4(),\n        referenceId: `GRV${Date.now().toString().slice(-6)}`,\n        ...action.payload,\n        status: 'Submitted',\n        submittedAt: new Date(),\n        lastUpdated: new Date(),\n        updates: [{\n          id: uuidv4(),\n          status: 'Submitted',\n          message: 'Your grievance has been submitted successfully.',\n          timestamp: new Date(),\n          updatedBy: 'System'\n        }]\n      };\n      return {\n        ...state,\n        grievances: [...state.grievances, newGrievance]\n      };\n    case actionTypes.UPDATE_GRIEVANCE_STATUS:\n      return {\n        ...state,\n        grievances: state.grievances.map(grievance => grievance.id === action.payload.grievanceId ? {\n          ...grievance,\n          status: action.payload.status,\n          lastUpdated: new Date(),\n          updates: [...grievance.updates, {\n            id: uuidv4(),\n            status: action.payload.status,\n            message: action.payload.message,\n            timestamp: new Date(),\n            updatedBy: action.payload.updatedBy\n          }]\n        } : grievance)\n      };\n    case actionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, {\n          id: uuidv4(),\n          ...action.payload,\n          timestamp: new Date()\n        }]\n      };\n    case actionTypes.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification.id !== action.payload)\n      };\n    case actionTypes.TOGGLE_CHATBOT:\n      return {\n        ...state,\n        chatbotOpen: !state.chatbotOpen\n      };\n    case actionTypes.LOAD_MOCK_GRIEVANCES:\n      return {\n        ...state,\n        grievances: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AppContext = /*#__PURE__*/createContext();\n\n// Context provider component\nexport const AppContextProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Action creators\n  const selectInstitution = institution => {\n    dispatch({\n      type: actionTypes.SELECT_INSTITUTION,\n      payload: institution\n    });\n  };\n  const selectRole = role => {\n    dispatch({\n      type: actionTypes.SELECT_ROLE,\n      payload: role\n    });\n    dispatch({\n      type: actionTypes.LOGIN_USER\n    }); // Automatically authenticate user after role selection\n  };\n  const loginUser = () => {\n    dispatch({\n      type: actionTypes.LOGIN_USER\n    });\n  };\n  const logoutUser = () => {\n    dispatch({\n      type: actionTypes.LOGOUT_USER\n    });\n  };\n  const submitGrievance = grievanceData => {\n    dispatch({\n      type: actionTypes.SUBMIT_GRIEVANCE,\n      payload: grievanceData\n    });\n\n    // Add success notification\n    addNotification({\n      type: 'success',\n      title: 'Grievance Submitted',\n      message: `Your grievance has been submitted successfully. Reference ID: ${grievanceData.referenceId}`\n    });\n  };\n  const updateGrievanceStatus = (grievanceId, status, message, updatedBy) => {\n    dispatch({\n      type: actionTypes.UPDATE_GRIEVANCE_STATUS,\n      payload: {\n        grievanceId,\n        status,\n        message,\n        updatedBy\n      }\n    });\n\n    // Add notification for status update\n    addNotification({\n      type: 'info',\n      title: 'Status Updated',\n      message: `Grievance status updated to: ${status}`\n    });\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: actionTypes.ADD_NOTIFICATION,\n      payload: notification\n    });\n  };\n  const removeNotification = notificationId => {\n    dispatch({\n      type: actionTypes.REMOVE_NOTIFICATION,\n      payload: notificationId\n    });\n  };\n  const toggleChatbot = () => {\n    dispatch({\n      type: actionTypes.TOGGLE_CHATBOT\n    });\n  };\n  const loadMockGrievances = () => {\n    var _state$user$selectedI, _state$user$selectedI2;\n    const mockGrievances = [{\n      id: uuidv4(),\n      referenceId: 'GRV001234',\n      category: 'Academic Issues',\n      description: 'Issues with course registration system not working properly',\n      status: 'In Progress',\n      submittedAt: new Date(Date.now() - 86400000 * 2),\n      // 2 days ago\n      lastUpdated: new Date(Date.now() - 86400000),\n      // 1 day ago\n      isAnonymous: true,\n      institutionId: (_state$user$selectedI = state.user.selectedInstitution) === null || _state$user$selectedI === void 0 ? void 0 : _state$user$selectedI.id,\n      updates: [{\n        id: uuidv4(),\n        status: 'Submitted',\n        message: 'Your grievance has been submitted successfully.',\n        timestamp: new Date(Date.now() - 86400000 * 2),\n        updatedBy: 'System'\n      }, {\n        id: uuidv4(),\n        status: 'Under Review',\n        message: 'Your grievance is being reviewed by the academic department.',\n        timestamp: new Date(Date.now() - 86400000 * 1.5),\n        updatedBy: 'Academic Officer'\n      }, {\n        id: uuidv4(),\n        status: 'In Progress',\n        message: 'We are working on resolving the technical issues with the registration system.',\n        timestamp: new Date(Date.now() - 86400000),\n        updatedBy: 'IT Department'\n      }]\n    }, {\n      id: uuidv4(),\n      referenceId: 'GRV001235',\n      category: 'Infrastructure Problems',\n      description: 'Library air conditioning not working properly, making it difficult to study',\n      status: 'Resolved',\n      submittedAt: new Date(Date.now() - 86400000 * 5),\n      lastUpdated: new Date(Date.now() - 86400000 * 0.5),\n      isAnonymous: false,\n      institutionId: (_state$user$selectedI2 = state.user.selectedInstitution) === null || _state$user$selectedI2 === void 0 ? void 0 : _state$user$selectedI2.id,\n      updates: [{\n        id: uuidv4(),\n        status: 'Submitted',\n        message: 'Your grievance has been submitted successfully.',\n        timestamp: new Date(Date.now() - 86400000 * 5),\n        updatedBy: 'System'\n      }, {\n        id: uuidv4(),\n        status: 'Assigned',\n        message: 'Your grievance has been assigned to the Facilities Management team.',\n        timestamp: new Date(Date.now() - 86400000 * 4),\n        updatedBy: 'Grievance Officer'\n      }, {\n        id: uuidv4(),\n        status: 'In Progress',\n        message: 'Maintenance team has been scheduled to repair the AC system.',\n        timestamp: new Date(Date.now() - 86400000 * 2),\n        updatedBy: 'Facilities Manager'\n      }, {\n        id: uuidv4(),\n        status: 'Resolved',\n        message: 'AC system has been repaired and is now working properly.',\n        timestamp: new Date(Date.now() - 86400000 * 0.5),\n        updatedBy: 'Facilities Manager'\n      }]\n    }];\n    dispatch({\n      type: actionTypes.LOAD_MOCK_GRIEVANCES,\n      payload: mockGrievances\n    });\n  };\n  const value = {\n    state,\n    selectInstitution,\n    selectRole,\n    loginUser,\n    logoutUser,\n    submitGrievance,\n    updateGrievanceStatus,\n    addNotification,\n    removeNotification,\n    toggleChatbot,\n    loadMockGrievances\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the context\n_s(AppContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = AppContextProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppContextProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","v4","uuidv4","jsxDEV","_jsxDEV","mockInstitutions","id","name","type","mockRoles","description","mockCategories","initialState","user","selectedInstitution","selectedRole","isAuthenticated","institutions","roles","categories","grievances","notifications","chatbotOpen","actionTypes","SELECT_INSTITUTION","SELECT_ROLE","LOGIN_USER","LOGOUT_USER","SUBMIT_GRIEVANCE","UPDATE_GRIEVANCE_STATUS","ADD_NOTIFICATION","REMOVE_NOTIFICATION","TOGGLE_CHATBOT","LOAD_MOCK_GRIEVANCES","appReducer","state","action","payload","newGrievance","referenceId","Date","now","toString","slice","status","submittedAt","lastUpdated","updates","message","timestamp","updatedBy","map","grievance","grievanceId","filter","notification","AppContext","AppContextProvider","children","_s","dispatch","selectInstitution","institution","selectRole","role","loginUser","logoutUser","submitGrievance","grievanceData","addNotification","title","updateGrievanceStatus","removeNotification","notificationId","toggleChatbot","loadMockGrievances","_state$user$selectedI","_state$user$selectedI2","mockGrievances","category","isAnonymous","institutionId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/jaide/-Online-Feedback-and-Grievance-Redressal-System-/grievance-system/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// Mock data for institutions and roles\r\nconst mockInstitutions = [\r\n  { id: 'inst_1', name: 'University of Technology', type: 'University' },\r\n  { id: 'inst_2', name: 'City Medical College', type: 'Medical College' },\r\n  { id: 'inst_3', name: 'Regional Engineering Institute', type: 'Engineering College' },\r\n  { id: 'inst_4', name: 'State Business School', type: 'Business School' },\r\n  { id: 'inst_5', name: 'Government Arts College', type: 'Arts College' },\r\n];\r\n\r\nconst mockRoles = [\r\n  { id: 'role_1', name: 'Student', description: 'Student of the institution' },\r\n  { id: 'role_2', name: 'Faculty', description: 'Teaching staff member' },\r\n  { id: 'role_3', name: 'Admin', description: 'Administrative staff' },\r\n  { id: 'role_4', name: 'Grievance Officer', description: 'Handles grievance processing' },\r\n];\r\n\r\nconst mockCategories = [\r\n  'Academic Issues',\r\n  'Hostel/Accommodation',\r\n  'Harassment/Discrimination',\r\n  'Fee/Financial Issues',\r\n  'Infrastructure Problems',\r\n  'Administrative Issues',\r\n  'Other'\r\n];\r\n\r\n// Initial state\r\nconst initialState = {\r\n  user: {\r\n    selectedInstitution: null,\r\n    selectedRole: null,\r\n    isAuthenticated: false,\r\n  },\r\n  institutions: mockInstitutions,\r\n  roles: mockRoles,\r\n  categories: mockCategories,\r\n  grievances: [],\r\n  notifications: [],\r\n  chatbotOpen: false,\r\n};\r\n\r\n// Action types\r\nconst actionTypes = {\r\n  SELECT_INSTITUTION: 'SELECT_INSTITUTION',\r\n  SELECT_ROLE: 'SELECT_ROLE',\r\n  LOGIN_USER: 'LOGIN_USER',\r\n  LOGOUT_USER: 'LOGOUT_USER',\r\n  SUBMIT_GRIEVANCE: 'SUBMIT_GRIEVANCE',\r\n  UPDATE_GRIEVANCE_STATUS: 'UPDATE_GRIEVANCE_STATUS',\r\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\r\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\r\n  TOGGLE_CHATBOT: 'TOGGLE_CHATBOT',\r\n  LOAD_MOCK_GRIEVANCES: 'LOAD_MOCK_GRIEVANCES',\r\n};\r\n\r\n// Reducer function\r\nconst appReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SELECT_INSTITUTION:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          selectedInstitution: action.payload,\r\n        },\r\n      };\r\n\r\n    case actionTypes.SELECT_ROLE:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          selectedRole: action.payload,\r\n        },\r\n      };\r\n\r\n    case actionTypes.LOGIN_USER:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isAuthenticated: true,\r\n        },\r\n      };\r\n\r\n    case actionTypes.LOGOUT_USER:\r\n      return {\r\n        ...state,\r\n        user: {\r\n          selectedInstitution: null,\r\n          selectedRole: null,\r\n          isAuthenticated: false,\r\n        },\r\n      };\r\n\r\n    case actionTypes.SUBMIT_GRIEVANCE:\r\n      const newGrievance = {\r\n        id: uuidv4(),\r\n        referenceId: `GRV${Date.now().toString().slice(-6)}`,\r\n        ...action.payload,\r\n        status: 'Submitted',\r\n        submittedAt: new Date(),\r\n        lastUpdated: new Date(),\r\n        updates: [\r\n          {\r\n            id: uuidv4(),\r\n            status: 'Submitted',\r\n            message: 'Your grievance has been submitted successfully.',\r\n            timestamp: new Date(),\r\n            updatedBy: 'System',\r\n          },\r\n        ],\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        grievances: [...state.grievances, newGrievance],\r\n      };\r\n\r\n    case actionTypes.UPDATE_GRIEVANCE_STATUS:\r\n      return {\r\n        ...state,\r\n        grievances: state.grievances.map((grievance) =>\r\n          grievance.id === action.payload.grievanceId\r\n            ? {\r\n                ...grievance,\r\n                status: action.payload.status,\r\n                lastUpdated: new Date(),\r\n                updates: [\r\n                  ...grievance.updates,\r\n                  {\r\n                    id: uuidv4(),\r\n                    status: action.payload.status,\r\n                    message: action.payload.message,\r\n                    timestamp: new Date(),\r\n                    updatedBy: action.payload.updatedBy,\r\n                  },\r\n                ],\r\n              }\r\n            : grievance\r\n        ),\r\n      };\r\n\r\n    case actionTypes.ADD_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: [\r\n          ...state.notifications,\r\n          {\r\n            id: uuidv4(),\r\n            ...action.payload,\r\n            timestamp: new Date(),\r\n          },\r\n        ],\r\n      };\r\n\r\n    case actionTypes.REMOVE_NOTIFICATION:\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(\r\n          (notification) => notification.id !== action.payload\r\n        ),\r\n      };\r\n\r\n    case actionTypes.TOGGLE_CHATBOT:\r\n      return {\r\n        ...state,\r\n        chatbotOpen: !state.chatbotOpen,\r\n      };\r\n\r\n    case actionTypes.LOAD_MOCK_GRIEVANCES:\r\n      return {\r\n        ...state,\r\n        grievances: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst AppContext = createContext();\r\n\r\n// Context provider component\r\nexport const AppContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  // Action creators\r\n  const selectInstitution = (institution) => {\r\n    dispatch({ type: actionTypes.SELECT_INSTITUTION, payload: institution });\r\n  };\r\n\r\n  const selectRole = (role) => {\r\n    dispatch({ type: actionTypes.SELECT_ROLE, payload: role });\r\n    dispatch({ type: actionTypes.LOGIN_USER }); // Automatically authenticate user after role selection\r\n  };\r\n\r\n  const loginUser = () => {\r\n    dispatch({ type: actionTypes.LOGIN_USER });\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    dispatch({ type: actionTypes.LOGOUT_USER });\r\n  };\r\n\r\n  const submitGrievance = (grievanceData) => {\r\n    dispatch({ type: actionTypes.SUBMIT_GRIEVANCE, payload: grievanceData });\r\n    \r\n    // Add success notification\r\n    addNotification({\r\n      type: 'success',\r\n      title: 'Grievance Submitted',\r\n      message: `Your grievance has been submitted successfully. Reference ID: ${grievanceData.referenceId}`,\r\n    });\r\n  };\r\n\r\n  const updateGrievanceStatus = (grievanceId, status, message, updatedBy) => {\r\n    dispatch({\r\n      type: actionTypes.UPDATE_GRIEVANCE_STATUS,\r\n      payload: { grievanceId, status, message, updatedBy },\r\n    });\r\n    \r\n    // Add notification for status update\r\n    addNotification({\r\n      type: 'info',\r\n      title: 'Status Updated',\r\n      message: `Grievance status updated to: ${status}`,\r\n    });\r\n  };\r\n\r\n  const addNotification = (notification) => {\r\n    dispatch({ type: actionTypes.ADD_NOTIFICATION, payload: notification });\r\n  };\r\n\r\n  const removeNotification = (notificationId) => {\r\n    dispatch({ type: actionTypes.REMOVE_NOTIFICATION, payload: notificationId });\r\n  };\r\n\r\n  const toggleChatbot = () => {\r\n    dispatch({ type: actionTypes.TOGGLE_CHATBOT });\r\n  };\r\n\r\n  const loadMockGrievances = () => {\r\n    const mockGrievances = [\r\n      {\r\n        id: uuidv4(),\r\n        referenceId: 'GRV001234',\r\n        category: 'Academic Issues',\r\n        description: 'Issues with course registration system not working properly',\r\n        status: 'In Progress',\r\n        submittedAt: new Date(Date.now() - 86400000 * 2), // 2 days ago\r\n        lastUpdated: new Date(Date.now() - 86400000), // 1 day ago\r\n        isAnonymous: true,\r\n        institutionId: state.user.selectedInstitution?.id,\r\n        updates: [\r\n          {\r\n            id: uuidv4(),\r\n            status: 'Submitted',\r\n            message: 'Your grievance has been submitted successfully.',\r\n            timestamp: new Date(Date.now() - 86400000 * 2),\r\n            updatedBy: 'System',\r\n          },\r\n          {\r\n            id: uuidv4(),\r\n            status: 'Under Review',\r\n            message: 'Your grievance is being reviewed by the academic department.',\r\n            timestamp: new Date(Date.now() - 86400000 * 1.5),\r\n            updatedBy: 'Academic Officer',\r\n          },\r\n          {\r\n            id: uuidv4(),\r\n            status: 'In Progress',\r\n            message: 'We are working on resolving the technical issues with the registration system.',\r\n            timestamp: new Date(Date.now() - 86400000),\r\n            updatedBy: 'IT Department',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        referenceId: 'GRV001235',\r\n        category: 'Infrastructure Problems',\r\n        description: 'Library air conditioning not working properly, making it difficult to study',\r\n        status: 'Resolved',\r\n        submittedAt: new Date(Date.now() - 86400000 * 5),\r\n        lastUpdated: new Date(Date.now() - 86400000 * 0.5),\r\n        isAnonymous: false,\r\n        institutionId: state.user.selectedInstitution?.id,\r\n        updates: [\r\n          {\r\n            id: uuidv4(),\r\n            status: 'Submitted',\r\n            message: 'Your grievance has been submitted successfully.',\r\n            timestamp: new Date(Date.now() - 86400000 * 5),\r\n            updatedBy: 'System',\r\n          },\r\n          {\r\n            id: uuidv4(),\r\n            status: 'Assigned',\r\n            message: 'Your grievance has been assigned to the Facilities Management team.',\r\n            timestamp: new Date(Date.now() - 86400000 * 4),\r\n            updatedBy: 'Grievance Officer',\r\n          },\r\n          {\r\n            id: uuidv4(),\r\n            status: 'In Progress',\r\n            message: 'Maintenance team has been scheduled to repair the AC system.',\r\n            timestamp: new Date(Date.now() - 86400000 * 2),\r\n            updatedBy: 'Facilities Manager',\r\n          },\r\n          {\r\n            id: uuidv4(),\r\n            status: 'Resolved',\r\n            message: 'AC system has been repaired and is now working properly.',\r\n            timestamp: new Date(Date.now() - 86400000 * 0.5),\r\n            updatedBy: 'Facilities Manager',\r\n          },\r\n        ],\r\n      },\r\n    ];\r\n\r\n    dispatch({ type: actionTypes.LOAD_MOCK_GRIEVANCES, payload: mockGrievances });\r\n  };\r\n\r\n  const value = {\r\n    state,\r\n    selectInstitution,\r\n    selectRole,\r\n    loginUser,\r\n    logoutUser,\r\n    submitGrievance,\r\n    updateGrievanceStatus,\r\n    addNotification,\r\n    removeNotification,\r\n    toggleChatbot,\r\n    loadMockGrievances,\r\n  };\r\n\r\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\r\n};\r\n\r\n// Custom hook to use the context\r\nexport const useAppContext = () => {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAppContext must be used within an AppContextProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}